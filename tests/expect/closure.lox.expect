[Token]: FUN fun fun l1
[Token]: IDENTIFIER makeCounter makeCounter l1
[Token]: LEFT_PAREN ( l1
[Token]: RIGHT_PAREN ) l1
[Token]: LEFT_BRACE { l1
[Token]: VAR var var l2
[Token]: IDENTIFIER i i l2
[Token]: EQUAL = l2
[Token]: NUMBER 0 0 l2
[Token]: SEMICOLON ; l2
[Token]: FUN fun fun l3
[Token]: IDENTIFIER count count l3
[Token]: LEFT_PAREN ( l3
[Token]: RIGHT_PAREN ) l3
[Token]: LEFT_BRACE { l3
[Token]: IDENTIFIER i i l4
[Token]: EQUAL = l4
[Token]: IDENTIFIER i i l4
[Token]: PLUS + l4
[Token]: NUMBER 1 1 l4
[Token]: SEMICOLON ; l4
[Token]: PRINT print print l5
[Token]: IDENTIFIER i i l5
[Token]: SEMICOLON ; l5
[Token]: RIGHT_BRACE } l6
[Token]: RETURN return return l8
[Token]: IDENTIFIER count count l8
[Token]: SEMICOLON ; l8
[Token]: RIGHT_BRACE } l9
[Token]: VAR var var l11
[Token]: IDENTIFIER counter counter l11
[Token]: EQUAL = l11
[Token]: IDENTIFIER makeCounter makeCounter l11
[Token]: LEFT_PAREN ( l11
[Token]: RIGHT_PAREN ) l11
[Token]: SEMICOLON ; l11
[Token]: IDENTIFIER counter counter l12
[Token]: LEFT_PAREN ( l12
[Token]: RIGHT_PAREN ) l12
[Token]: SEMICOLON ; l12
[Token]: IDENTIFIER counter counter l13
[Token]: LEFT_PAREN ( l13
[Token]: RIGHT_PAREN ) l13
[Token]: SEMICOLON ; l13
[Token]: IDENTIFIER counter counter l14
[Token]: LEFT_PAREN ( l14
[Token]: RIGHT_PAREN ) l14
[Token]: SEMICOLON ; l14
[Token]: END_OF_FILE  l15
Program:
{FUNCTION Stmt 'makeCounter' ()
 BODY:
{BLOCK Stmt
{VAR Stmt 'i' = 0.000000}
{FUNCTION Stmt 'count' ()
 BODY:
{BLOCK Stmt
{EXPRESSION Stmt (assignment 'i' = (PLUS '+' (variable 'i') 1.000000))}
{PRINT Stmt (variable 'i')}
}
}
{RETURN Stmt '(variable 'count')}
}
}
{VAR Stmt 'counter' = (CALL (variable 'makeCounter'))}
{EXPRESSION Stmt (CALL (variable 'counter'))}
{EXPRESSION Stmt (CALL (variable 'counter'))}
{EXPRESSION Stmt (CALL (variable 'counter'))}
------
1
2
3
